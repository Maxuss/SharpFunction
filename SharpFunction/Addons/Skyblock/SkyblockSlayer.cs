using SharpFunction.Commands;
using SharpFunction.Writer;

namespace SharpFunction.Addons.Skyblock
{
    /// <summary>
    ///     Represents skyblock slayer
    /// </summary>
    public sealed class SkyblockSlayer
    {
        /// <summary>
        ///     Creates a new slayer
        /// </summary>
        /// <param name="items">Items of slayer</param>
        /// <param name="tiers">Tiers of slayer bosses</param>
        /// <param name="writer">FunctionWriter from project</param>
        /// <param name="name">Name of slayer boss</param>
        public SkyblockSlayer(SkyblockItem[] items, SlayerTier[] tiers, SlayerDrop[] drops, SlayerLevel[] levels,
            FunctionWriter writer, string name)
        {
            SlayerItems = items;
            SlayerTiers = tiers;
            SlayerDrops = drops;
            Levels = levels;
            Writer = writer;
            SlayerBossName = name;
        }

        /// <summary>
        ///     Generate an empty skyblock slayer to add all the data later
        /// </summary>
        public SkyblockSlayer()
        {
        }

        /// <summary>
        ///     All items related to this slayer
        /// </summary>
        public SkyblockItem[] SlayerItems { get; set; }

        /// <summary>
        ///     All slayer boss tiers of the boss
        /// </summary>
        public SlayerTier[] SlayerTiers { get; set; }

        /// <summary>
        ///     All slayer drops of the slayer
        /// </summary>
        public SlayerDrop[] SlayerDrops { get; set; }

        /// <summary>
        ///     Leveling rewards for slayer
        /// </summary>
        public SlayerLevel[] Levels { get; set; }

        /// <summary>
        ///     FunctionWriter to write datapack functions
        /// </summary>
        public FunctionWriter Writer { get; set; }

        /// <summary>
        ///     Minibosses of slayer
        /// </summary>
        public SkyblockEntity[] Minibosses { get; set; }

        /// <summary>
        ///     Name of slayer boss
        /// </summary>
        public string SlayerBossName { get; set; }

        /// <summary>
        ///     Generates all the required stuff for datapack
        /// </summary>
        public void Generate()
        {
            Writer.CreateCategory($"{SlayerBossName.ToLower().Replace(" ", "_")}_slayer");
            Writer.CreateFunction("items");
            Writer.CreateFunction("drops");
            Writer.CreateFunction("rewards");
            for (var i = 0; i < SlayerTiers.Length; i++)
            {
                Writer.CreateFunction($"boss_{i + 1}");
                CommandModule b = new();
                b.Append($"# This script is used to summon {SlayerBossName} Slayer Tier {i + 1}",
                    "# This file is PRE-GENERATED by SharpFunction", " ");
                SlayerTiers[i].Compile();
                b.Append("# Give Item representing the slayer ", $"{SlayerTiers[i].GiveCommand}",
                    "# Summon Command summoning boss", $"{SlayerTiers[i].SummonCommand}");
                Writer.WriteCommand(b, $"boss_{i + 1}");
            }

            CommandModule items = new();
            items.Append($"# This script is used to give all items related to {SlayerBossName} Slayer",
                "# This file is PRE-GENERATED by SharpFunction", " ");
            CommandModule drops = new();
            drops.Append($"# This script is used to give all drops info related to {SlayerBossName} Slayer",
                "# This file is PRE-GENERATED by SharpFunction", " ");
            CommandModule minis = new();
            minis.Append($"# This script is used to summon all minibosses/entities related to {SlayerBossName} Slayer",
                "# This file is PRE-GENERATED by SharpFunction", " ");
            foreach (var it in SlayerItems)
            {
                var i = it.Compile();
                items.Append($"# Gives {it.DisplayName}", i, " ");
            }

            Writer.WriteCommand(items, "items");
            foreach (var dr in SlayerDrops)
            {
                var d = dr.Compile();

                drops.Append($"# Gives drop info item on {dr.ItemName}", d, dr.GetDropMessage().Compiled, " ");
            }

            Writer.WriteCommand(drops, "drops");
            foreach (var se in Minibosses)
            {
                se.Compile();
                var s = se.Command.Compiled;
                CommandModule sm = new();
                sm.Append($"# Summons {se.Name}", s);
                Writer.CreateFunction($"summon_{se.Name.ToLower().Replace(" ", "_")}");
                Writer.WriteCommand(sm, $"summon_{se.Name.ToLower().Replace(" ", "_")}");
            }

            CommandModule slm = new();
            slm.Append($"# This script is used to generate leveling rewards for {SlayerBossName} Slayer",
                "# This file is PRE-GENERATED by SharpFunction", " ");
            foreach (var sl in Levels)
            {
                var cmd = sl.Compile();
                slm.Append("#########", cmd, " ");
            }

            Writer.WriteCommand(slm, "rewards");
        }
    }
}