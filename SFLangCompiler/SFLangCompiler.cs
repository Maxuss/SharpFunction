using System;
using System.IO;
using System.Linq;
using SFLang.Exceptions;
using SFLang.Language;
using SFLang.Lexicon;
using File = System.IO.File;

namespace SFLangCompiler
{
    class SFLangCompiler
    {
        static void Main(string[] args)
        {
            Compiler.Compile(Directory.GetCurrentDirectory(), "testing-lib");
            
            if (args.Length > 0)
            {
                var first = args[0];
                if (first.Contains("-file") || first.Contains("--f"))
                {
                    if (first.Contains("-file"))
                    {
                        first = first.Replace("-file=", "");
                    }
                    else if (first.Contains("--f"))
                    {
                        first = first.Replace("--f=", "");
                    }

                    if (!File.Exists(first))
                    {
                        throw new ArgumentException("Invalid file provided!");
                    }

                    var total = File.ReadAllText(first);
                    
                    var ctx = new Lambdas.Unit();
                    var binder = new ContextBinder<Lambdas.Unit>(ctx);
                    Lambdas.CreateScope(binder);

                    var lambda = Lambdas.Compile(total, ctx);

                    try
                    {
                        lambda();
                    }
                    catch (PrettyException pretty)
                    {
                        var handler = new PrettyException(29, -1, typeof(SFLangCompiler).FullName,
                            "Thread error handler", pretty);
                        handler.PrettyPrint();
                    }
                    catch (Exception normal)
                    {
                        try
                        {
                            var handler = new PrettyException("An error occurred in main thread!",
                                new PrettyException($"{normal.Message} Cause: {normal.InnerException?.Message}"));
                        }
                        catch (PrettyException expected)
                        {
                            expected.PrettyPrint();
                        }
                    }
                    finally
                    {
                        Console.WriteLine("Finished execution of program!");
                    }
                } else if (first.Contains("-scope") || first.Contains("--s") || first.Contains("-current") || first.Contains("--c"))
                {
                    if (first.Contains("-scope"))
                    {
                        first = first.Replace("-scope=", "");
                    }
                    else if (first.Contains("--s"))
                    {
                        first = first.Replace("--s=", "");
                    }
                    else if (first.Contains("-current") || first.Contains("--c"))
                    {
                        first = Directory.GetCurrentDirectory();
                    }
                    
                    if (!Directory.Exists(first))
                    {
                        throw new ArgumentException("Invalid directory provided!");
                    }
                    var files = Directory.GetFiles(first, "*.sf");
                    var total = files.Aggregate("// PRE GENERATED BY SFLANG\n", (current, f) => $"{current}{File.ReadAllText(f)}\n");
                    
                    var ctx = new Lambdas.Unit();
                    var binder = new ContextBinder<Lambdas.Unit>(ctx);
                    Lambdas.CreateScope(binder);

                    var lambda = Lambdas.Compile(total, ctx);

                    try
                    {
                        lambda();
                    }
                    catch (PrettyException pretty)
                    {
                        var handler = new PrettyException(29, -1, typeof(SFLangCompiler).FullName,
                            "Thread error handler", pretty);
                        handler.PrettyPrint();
                    }
                    catch (Exception normal)
                    {
                        try
                        {
                            var handler = new PrettyException("An error occurred in main thread!",
                                new PrettyException($"{normal.Message} Cause: {normal.InnerException?.Message}"));
                        }
                        catch (PrettyException expected)
                        {
                            expected.PrettyPrint();
                        }
                    }
                }
            }
            else
            {

                Console.WriteLine($"SFLang v{SFLang.SFLang.LanguageVersion} with SFLexicon v{SFLang.SFLang.LexerVersion}");
                Console.WriteLine("Welcome to interactive SFLang Interpreter!");
                Console.WriteLine("Just enter code and we will evalutate it!");
                Console.WriteLine("(Type '!stop' to exit program)");
                var ctx = new Lambdas.Unit();
                var binder = new ContextBinder<Lambdas.Unit>(ctx);
                Lambdas.CreateScope(binder);

                while (true)
                {
                    Console.Write("> ");
                    var input = Console.ReadLine() ?? "null";

                    if (input.ToLower() == "!stop")
                    {
                        return;
                    } else if (input == "!compile-scope")
                    {
                        var files = Directory.GetFiles(Directory.GetCurrentDirectory(), "*.sf");
                        var total = files.Aggregate("// PRE GENERATED BY SFLANG\n", (current, f) => $"{current}{File.ReadAllText(f)}\n");
                        
                        try
                        {
                            Lambdas.Compile(total, ctx)();
                        }
                        catch (PrettyException pretty)
                        {
                            var handler = new PrettyException(29, -1, typeof(SFLangCompiler).FullName,
                                "Thread error handler", pretty);
                            handler.PrettyPrint();
                        }
                        catch (Exception normal)
                        {
                            try
                            {
                                var handler = new PrettyException("An error occurred in main thread!",
                                    new PrettyException($"{normal.Message} Cause: {normal.InnerException?.Message}"));
                            }
                            catch (PrettyException expected)
                            {
                                expected.PrettyPrint();
                            }
                        }

                        Console.ReadLine();
                        return;
                    }

                    try
                    {
                        Lambdas.Compile(input, ctx)();
                    }
                    catch (PrettyException pretty)
                    {
                        var handler = new PrettyException(29, -1, typeof(SFLangCompiler).FullName,
                            "Thread Exception handler", pretty);
                        handler.PrettyPrint();
                    }
                    catch (Exception normal)
                    {
                        try
                        {
                            var handler = new PrettyException("An error occurred in main thread!",
                                new PrettyException(normal.Message + $" Cause: {normal.InnerException?.Message}"));
                        }
                        catch (PrettyException expected)
                        {
                            expected.PrettyPrint();
                        }
                    }
                }
            }
        }
    }
}